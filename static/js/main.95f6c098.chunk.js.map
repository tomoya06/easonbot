{"version":3,"sources":["Debugger.js","Main.js","utils.js","App.js","index.js"],"names":["SQLRepl","db","switchDebug","useState","error","setError","results","setResults","onClick","onChange","e","sql","exec","err","target","value","placeholder","className","toString","map","i","columns","values","ResultsTable","columnName","row","doCopy","item","lyric","song_name","year","album_name","copyText","navigator","clipboard","writeText","msg","container","document","createElement","content","createTextNode","appendChild","body","setTimeout","parentElement","removeChild","toast","Row","dotlessTitle","defaultTitle","Main","keyword","setKeyword","phDots","setDots","inputStatus","useMemo","length","title","repeat","imgSrc","useEffect","intv","clearTimeout","src","word","genSearchSql","parsedResult","result","forEach","col","idx","parseResults","onKeyUp","key","blur","JSON","stringify","href","App","setDb","isDebug","setDebug","a","Promise","all","fetch","then","res","arrayBuffer","initSqlJs","locateFile","sqlWasm","SQL","Database","Uint8Array","rootElement","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.95f6c098.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './Debugger.css';\n\n/**\n * A simple SQL read-eval-print-loop\n * @param {{db: import(\"sql.js\").Database, switchDebug: () => void}} props\n */\nexport function SQLRepl({ db, switchDebug }) {\n  const [error, setError] = useState(null);\n  const [results, setResults] = useState([]);\n\n  function exec(sql) {\n    try {\n      // The sql is executed synchronously on the UI thread.\n      // You may want to use a web worker here instead\n      setResults(db.exec(sql)); // an array of objects is returned\n      setError(null);\n    } catch (err) {\n      // exec throws an error when the SQL statement is invalid\n      setError(err);\n      setResults([]);\n    }\n  }\n\n  return (\n    <>\n      <h1 onClick={() => switchDebug()}>React SQL interpreter</h1>\n\n      <textarea\n        onChange={(e) => exec(e.target.value)}\n        placeholder=\"Enter some SQL. No inspiration ? Try “select sqlite_version()”\"\n      ></textarea>\n\n      <pre className=\"error\">{(error || \"\").toString()}</pre>\n\n      <pre>\n        {\n          // results contains one object per select statement in the query\n          results.map(({ columns, values }, i) => (\n            <ResultsTable key={i} columns={columns} values={values} />\n          ))\n        }\n      </pre>\n    </>\n  );\n}\n\n/**\n * Renders a single value of the array returned by db.exec(...) as a table\n * @param {import(\"sql.js\").QueryExecResult} props\n */\nfunction ResultsTable({ columns, values }) {\n  return (\n    <table className=\"debugtable\">\n      <thead>\n        <tr>\n          {columns.map((columnName, i) => (\n            <td key={i}>{columnName}</td>\n          ))}\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          // values is an array of arrays representing the results of the query\n          values.map((row, i) => (\n            <tr key={i}>\n              {row.map((value, i) => (\n                <td key={i}>{value}</td>\n              ))}\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  );\n}\n","import React, { useState, useMemo, useEffect } from \"react\";\nimport { genSearchSql, parseResults } from \"./utils\";\nimport './Main.css';\n\nfunction toast(msg) {\n  const container = document.createElement('div');\n  container.className = 'toast';\n  const content = document.createTextNode(msg);\n  container.appendChild(content);\n  document.body.appendChild(container);\n\n  setTimeout(() => {\n    container.parentElement.removeChild(container);\n  }, 2000);\n}\n\nfunction doCopy(item) {\n  const { lyric, song_name, album_name, year } = item;\n  const copyText = `${lyric} ——《${song_name}》, ${year}`;\n  navigator.clipboard.writeText(copyText);\n\n  toast(`歌词已复制：${copyText}`);\n}\n\n/**\n * 渲染单个组件\n * @param {{ item: { lyric: string, song_name: string, album_name: string, year: string } }} param0 \n */\nfunction Row({ item }) {\n  const { lyric, song_name, album_name, year } = item;\n\n  return (\n    <div\n      className=\"lyricRow\"\n      onClick={() => doCopy(item)}>\n      <strong className=\"lyric\">{lyric}</strong>\n      <div className=\"comment\">《{song_name}》, {year}</div>\n    </div>\n  );\n}\n\nconst dotlessTitle = '陈奕迅曾经唱过'\nconst defaultTitle = `${dotlessTitle}...`;\n\n/**\n * Main App\n * @param {{db: import(\"sql.js\").Database, switchDebug: () => void}} props\n */\nexport function Main({ db, switchDebug }) {\n  const [error, setError] = useState(null);\n  const [results, setResults] = useState([]);\n  const [keyword, setKeyword] = useState('');\n\n  const [phDots, setDots] = useState(2);\n\n  /**\n   * 搜索歌词\n   * @param {string} word\n   */\n  function exec(word) {\n    setKeyword(word);\n    if (!word) {\n      setResults([]);\n      return;\n    }\n\n    if (word === 'debugdebug') {\n      switchDebug();\n      return;\n    }\n\n    const sql = genSearchSql(word);\n\n    try {\n      const searchResult = db.exec(sql);\n      const parsedResult = parseResults(searchResult);\n      setResults(parsedResult);\n\n      // console.log(parsedResult);\n      setError(null);\n    } catch (error) {\n      setError(error);\n      setResults([]);\n    }\n  }\n\n  const inputStatus = useMemo(() => {\n    if (!keyword) {\n      return 0;\n    }\n    if (results.length > 0) {\n      return 1;\n    }\n    return -1;\n  }, [keyword, results]);\n\n  const title = useMemo(() => {\n    switch (inputStatus) {\n      case 0: return '';\n      case 1: return `陈奕迅曾经唱过 ${results.length} 句「${keyword}」`;\n      case -1: return `陈奕迅从来没唱过${keyword}...`;\n    }\n  }, [inputStatus, keyword, results]);\n\n  const placeholder = useMemo(() => {\n    return `${dotlessTitle}${'.'.repeat(phDots + 1)}`;\n  }, [phDots]);\n\n  const imgSrc = useMemo(() => {\n    switch (inputStatus) {\n      case 0: return './img/waiting.jpg';\n      case 1: return `./img/cool.jpg`;\n      case -1: return `./img/nonono.jpg`;\n    }\n  }, [inputStatus]);\n\n  useEffect(() => {\n    document.title = title || defaultTitle;\n  }, [title]);\n\n  useEffect(() => {\n    const intv = setTimeout(() => {\n      setDots((phDots + 1) % 3);\n    }, 1000);\n\n    return () => {\n      clearTimeout(intv);\n    }\n  }, [phDots]);\n\n  return (\n    <>\n      <article className={\"inputContainer \" + (inputStatus === 1 ? 'topContainer' : '')}>\n        <img src={imgSrc} className=\"easonAvatar\"></img>\n        <input\n          placeholder={placeholder}\n          onChange={e => exec(e.target.value)}\n          onKeyUp={e => {\n            if (e.key === 'Enter') {\n              e.target.blur();\n            }\n          }}\n        ></input>\n      </article>\n      <header>\n        {title}\n      </header>\n      <article>\n        {results.map(item => (\n          <Row key={JSON.stringify(item)} item={item} />\n        ))}\n      </article>\n      <footer>\n        歌词数据来源 <a href=\"https://mojim.com/\" target=\"_blank\">mojim.com</a> | 结果之准确性不归本站管\n        <br /><a href=\"https://github.com/tomoya06\">github@tomoya06</a> © 2022\n      </footer>\n    </>\n  )\n}","export function genSearchSql(keyword) {\n  return `\n  select lyrics.lyric, songs.song_name, albums.album_name, albums.year from lyrics \n  inner join songs on lyrics.song_id = songs.song_id \n  inner join albums on albums.album_id = songs.album_id\n  where lyrics.lyric like '%${keyword}%' group by lyrics.lyric, songs.song_name`;\n};\n\nexport function parseResults(result) {\n  try {\n    const { columns, values } = result[0];\n    return values.map(row => {\n      const item = {};\n      columns.forEach((col, idx) => {\n        item[col] = row[idx];\n      });\n\n      return item;\n    });\n  } catch (error) {\n    return [];\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport initSqlJs from \"sql.js\";\nimport { SQLRepl } from './Debugger';\nimport { Main } from './Main';\n\n// Required to let webpack 4 know it needs to copy the wasm file to our assets\nimport sqlWasm from \"!!file-loader?name=sql-wasm-[contenthash].wasm!sql.js/dist/sql-wasm.wasm\";\n\n/**\n * 存一个能搜关键字的sql\nselect lyrics.lyric, songs.song_name, albums.album_name from lyrics \ninner join songs on lyrics.song_id = songs.song_id \ninner join albums on albums.album_id = songs.album_id\nwhere lyrics.lyric like '%点解%' group by lyrics.lyric, lyrics.song_id limit 10\n */\n\nexport default function App() {\n  const [db, setDb] = useState(null);\n  const [isDebug, setDebug] = useState(false);\n  const [error, setError] = useState(null);\n\n  function switchDebug() {\n    setDebug(!isDebug);\n  }\n\n  useEffect(async () => {\n    // sql.js needs to fetch its wasm file, so we cannot immediately instantiate the database\n    // without any configuration, initSqlJs will fetch the wasm files directly from the same path as the js\n    // see ../craco.config.js\n    try {\n      const [db, SQL] = await Promise.all([\n        fetch('./database.db').then(res => res.arrayBuffer()),\n        initSqlJs({ locateFile: () => sqlWasm }),\n      ])\n      setDb(new SQL.Database(new Uint8Array(db)));\n    } catch (err) {\n      setError(err);\n    }\n  }, []);\n\n  if (error) return <pre>{error.toString()}</pre>;\n  if (!db) return <pre>Loading...</pre>;\n\n  return (\n    <div className=\"App\">\n      {\n        isDebug ? <SQLRepl db={db} switchDebug={switchDebug} /> : <Main db={db} switchDebug={switchDebug} />\n      }\n    </div>\n  )\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}